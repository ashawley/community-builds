//// about spaces

// we have these spaces:
// - scala
//   - scala.main
//     - scala.main.jawn_0_11
// the jawn split is because sbt 1 uses jawn 0.10.x (via its dependency
// on sjson-new) and the sbt team doesn't want to break  binary compatibility
// of sbt plugins. nearly everything else is on jawn 0.11, and the two versions
// are source-incompatible.
//
// in 2.13 we currently aren't even trying to build jawn 0.10 world.
// most of that world is old frozen versions of sbt(+modules) and zinc
// anyway, plus scaladex which hasn't moved to 2.13 and it's not clear
// if it will.

//// from environment

vars: {
  scala-version: ""
  scala-version: ${?version}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node" // node-js
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/lightbend/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

include file(".dbuild/project-refs.conf")
include file(".dbuild/resolvers.conf")

//// shared settings

vars {
  default-commands: []
  sbt-0-13-version: "0.13.18"
  sbt-1-2-version: "1.2.8"
  sbt-version: "1.3.0-RC3"
}

//// compiler options manipulation

// appendScalacOptions, removeScalacOptions, removeDependency
// let us work around https://github.com/lightbend/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterSetting[T](s: State, setting: SettingKey[T])(fn: T => T) = alterKeyImpl(s, setting)(fn)
  def alterTask[T](s: State, task: TaskKey[T])(fn: T => T) = alterKeyImpl(s, task)(fn)
  def alterKeyImpl[T](s: State, scopedKey: Scoped)(fn: T => T) = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val scopes = allDefs.filter(_.key == scopedKey.key).map(_.scope).distinct
    val redefined = (scopedKey: @unchecked) match {
      case setting: SettingKey[T @unchecked] => scopes.map(scope => setting in scope ~= fn)
      case task: TaskKey[T @unchecked]       => scopes.map(scope => task in scope ~= fn)
    }
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]): State = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterTask(s, scalacOptions)(appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]): State =
    alterTask(s, scalacOptions)(_.filterNot(args.contains))
  def removeJavaOptions(s: State, args: Seq[String]): State =
    alterTask(s, javaOptions)(_.filterNot(args.contains))
  def removeDependency(s: State, args: Seq[String]): State = {
    require(args.size == 2)
    alterSetting(s, libraryDependencies)(
      _.filterNot(mod => mod.organization == args(0) && mod.name == args(1)))
  }
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions),
    Command.args("removeJavaOptions", "<option>")(removeJavaOptions),
    Command.args("removeDependency", "<org> <artifact>")(removeDependency))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.default-commands += "removeScalacOptions -Xfatal-warnings -Yno-adapted-args -Ywarn-inaccessible -Ywarn-nullary-override -Ywarn-nullary-unit -Ywarn-infer-any -Ywarn-unused-import -Ypartial-unification -Ywarn-adapted-args -Xmax-classfile-name -Ymacro-no-expand"
vars.base.extra.commands = ${vars.default-commands}

//// count lines of code

vars.base.extra.settings = ["""libraryDependencies in ThisBuild += compilerPlugin("com.lightbend" %% "cloc-plugin" % "0")"""]
vars.base.deps.inject: ["com.lightbend#cloc-plugin"]

//// cache

// new behemoths have much more disk space, so let's try keeping stuff
// substantially longer (2 weeks instead of 4-5 days) and see what
// the effect on disk space usage is, starting March 17 2018
options.cleanup: {
  extraction: {
    success: 336
    failure: 336
  }
  build: {
    success: 336
    failure: 336
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}

  space: scala

  projects: [
  {
    name: "cloc-plugin"
    uri:  "https://github.com/SethTisue/cloc-plugin.git"
  }
  {
    name:  "scala"
    system: assemble
    cross-version: binary
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
    ]
  }

]}

//// space: scala.main

build += {

  space: scala.main

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  // well, this is a nice problem to have: ScalaCheck is undergoing such active
  // development at the moment (August 2019) that it's complicating community
  // build work by causing repeated rebuild-the-worlds. so, froze it for now.
  ${vars.base} {
    name: "scala-xml"
    uri:  ${vars.uris.scala-xml-uri}
    extra.projects: ["xml"]
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scalacheck"
    uri:  ${vars.uris.scalacheck-uri}
    extra.projects: ["jvm"]  // no Scala.js please
  }

  // see also scalatest-tests
  // 2.13: fork refreshed (from release-3.0.8 tag) August 2019
  // 2.12: forked for: build tweak, JDK 11 friendliness, comment out a test
  // fork refreshed (from 3.0.x branch) January 2019
  ${vars.base} {
    name: "scalatest"
    uri:  ${vars.uris.scalatest-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: ["scalatest", "scalactic"]
  }

  ${vars.base} {
    name: "scala-parser-combinators"
    uri:  ${vars.uris.scala-parser-combinators-uri}
    extra.exclude: ["scala-parser-combinatorsJS", "scala-parser-combinatorsNative"]
    extra.commands: ${vars.base.extra.commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }

  ${vars.base} {
    name: "scala-js-stubs"
    uri:  ${vars.uris.scala-js-stubs-uri}
  }

  ${vars.base} {
    name: "shapeless"
    uri:  ${vars.uris.shapeless-uri}
    extra.projects: ["coreJVM"]
  }

  ${vars.base} {
    name: "kind-projector"
    uri:  ${vars.uris.kind-projector-uri}
  }

  ${vars.base} {
    name: "specs2"
    uri:  ${vars.uris.specs2-uri}
    // I don't see a project that aggregates JVM-only stuff, so...
    extra.projects: [
      "analysisJVM", "commonJVM", "coreJVM", "fpJVM"
      "matcherExtraJVM", "matcherJVM", "mockJVM", "junitJVM"
      "scalacheckJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // makes "configuration not public" errors downstream go away
      "set every publishMavenStyle := false"
    ]
  }

  // dependency of cats
  ${vars.base} {
    name: "export-hook"
    uri:  ${vars.uris.export-hook-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.projects: ["coreJVM"]  // no Scala.js plz
  }

  ${vars.base} {
    name: "simulacrum"
    uri:  ${vars.uris.simulacrum-uri}
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
    extra.commands: ${vars.base.extra.commands} [
      // otherwise sbt-gpg errors on `publish`
      "set every gpgWarnOnFailure := true"
      // we have wartremover, but it's better to avoid the dependency if we can, to help
      // the dependency structure flatter overall
      "removeDependency org.wartremover wartremover"
      "removeScalacOptions -P:wartremover:traverser:org.wartremover.warts.ExplicitImplicitTypes -P:wartremover:traverser:org.wartremover.warts.ImplicitConversion"
    ]
    deps.ignore: ["org.wartremover#wartremover"]
  }

  // frozen (April 2019) at April 2019 commit before source-incompatible upgrade
  // to ScalaTest 3.1
  ${vars.base} {
    name: "discipline"
    uri:  ${vars.uris.discipline-uri}
    extra.projects: ["disciplineJVM"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  // frozen (March 2018) at a March 2018 commit before an sbt-catalysts version
  // bump -- the new version wouldn't resolve, not sure why
  ${vars.base} {
    name: "catalysts"
    uri:  ${vars.uris.catalysts-uri}
    // other projects aren't pertinent or errored out (not investigated)
    extra.projects: ["specbaseJVM", "lawkitJVM", "scalatestJVM", "macrosJVM", "platformJVM", "testkitJVM"]
    extra.commands: ${vars.base.extra.commands} [
      "appendScalacOptions -Ymacro-annotations"
      "removeDependency org.scalamacros paradise"
    ]
  }

  ${vars.base} {
    name: "machinist"
    uri:  ${vars.uris.machinist-uri}
    extra.projects: ["machinistJVM"]  // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "macro-compat"
    uri:  ${vars.uris.macro-compat-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  // frozen at v1.6.0 tag because dependencies have historically been fragile.
  // (perhaps this is overly cautious now, in 2019? not sure)
  // and forked (February 2019) from that tag to make some tiny ScalaCheck 1.13 vs 1.14 tweaks so tests pass
  // 2.13: master is where 2.13 support is; frozen (May 2019) at April 2019 commit
  // before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "cats"
    uri:  ${vars.uris.cats-uri}
    // for some reason, adding the umbrella "catsJVM" project but excluding "bench"
    // (and "docs") doesn't succeed in removing the depending on cats-bench.
    // using deps.ignore doesn't fix it either. not sure how else to fix it
    // other than just enumerating what we want:
    extra.projects: [
      "coreJVM", "freeJVM", "kernelJVM",
      "lawsJVM", "macrosJVM", "testkitJVM", "testsJVM",
      "kernelLawsJVM", "alleycatsCoreJVM"
    ]
    extra.exclude: [
      // out of scope
      "bench", "docs"
    ]
    // tests are memory-hungry. hard to tell if occasional OutOfMemoryErrors are because
    // some random test input in a generative test hit a real bug, or whether memory needs
    // just fluctuate :-/  I've been gradually increasing this trying to fix an OOM in
    // ApplicativeSuite.  the repo's own .jvmopts has 6g
    extra.options: ["-Xmx6g"]
  }

  // frozen (June 2019) at June 2019 commit just before ScalaTest 3.1 upgrade.
  // (when we unfreeze, the kind-projector org change stuff can go)
  ${vars.base} {
    name: "kittens"
    uri:  ${vars.uris.kittens-uri}
    extra.projects: ["coreJVM"]  // sorry, Scala.js
    deps.inject: ["org.typelevel#kind-projector"]
    extra.commands: ${vars.default-commands} [
      "removeDependency org.spire-math kind-projector"
      """set libraryDependencies in ThisBuild += compilerPlugin("org.typelevel" %% "kind-projector" % "0.0.0")"""
      // didn't compile (July 2019) after we unfroze ScalaCheck (StackOverflowError)
      """set excludeFilter in (Test, unmanagedSources) in coreJVM := HiddenFileFilter || "partialOrder.scala" || "monoid.scala" || "semigroup.scala" || "order.scala""""
    ]
  }

  ${vars.base} {
    name: "claimant"
    uri:  ${vars.uris.claimant-uri}
    extra.exclude: ["root", "mcJS", "coreJS"]  // no Scala.js plz
    extra.commands: ${vars.default-commands} [
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  ${vars.base} {
    name: "tut"
    uri:  ${vars.uris.tut-uri}
    // just core; it's unfortunate we don't run the tests, but they all use
    // scripted-plugin, which we don't know how to make work under dbuild
    extra.projects: ["core"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
    extra.options: ["-Dbintray.user=dummy", "-Dbintray.pass=dummy"]
    // ignore missing org.scala-sbt#scripted-plugin
    check-missing: false
  }

  // if master proves difficult to track, the 0.6.x branch could be
  // used instead; see discussion at
  // https://github.com/scala/community-builds/issues/506
  ${vars.base} {
    name: "scala-js"
    uri:  ${vars.uris.scala-js-uri}
    // ScalaJSCrossVersion.scala:34:23: stable identifier required, but sbt.`package`.CrossVersion.Disabled found.
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.options: [
      // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
      "-Xmx2048m"
    ]
    extra.projects: ["logging", "testSuite", "linker"]
    extra.commands: ${vars.default-commands} [
      // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
      //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
      //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
      "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := new org.scalajs.jsenv.nodejs.NodeJSEnv(org.scalajs.jsenv.nodejs.NodeJSEnv.Config().withExecutable(\""${vars.node}"\").withSourceMap(false)))"
      "set MyScalaJSPlugin.wantSourceMaps in testSuite := false"
      // Seb says it isn't appropriate to compile or run tests in certain subprojects;
      // see https://github.com/scala-js/scala-js/issues/3680
      "set test in testInterface in Test := {}"
      "set test in jUnitRuntime in Test := {}"
      "set test in testBridge in Test := {}"
      "set test in jUnitAsyncJS in Test := {}"
    ]
    // as usual with scripted-plugin, sigh
    deps.ignore: ["org.scala-sbt#scripted-plugin"]
    check-missing: false
  }

  // keep this stuff separate so the overall dependency tree is
  // flatter and when dependencies fail they don't take out every
  // specs2-using project downstream
  ${vars.base} {
    name: "specs2-more"
    uri:  ${vars.uris.specs2-uri}
    extra.projects: [
      "shapelessJVM", "catsJVM", "examplesJVM"
    ]
    extra.exclude: [
      // already built in "specs2"
      "analysisJVM", "commonJVM", "coreJVM", "fpJVM", "matcherExtraJVM", "matcherJVM",
      "mockJVM", "junitJVM", "scalacheckJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // not sure if necessary, but we have it in the specs entry, so let's have it here too
      "set every publishMavenStyle := false"
      // sbt 1.3.0-RC3 specific: Credentials file [...] does not exist
      "set every credentials := Seq()"
    ]
  }

  // this is almost 1M lines of code, but it needn't be green (or be compiled at all)
  // for dependent projects to proceed, so let's keep it separate.  our fork has
  // assorted small changes (that aren't worth thinking about further until we move to 3.1)
  ${vars.base} {
    name: "scalatest-tests"
    uri:  ${vars.uris.scalatest-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    extra.exclude: [
      // we already built these above
      "scalatest", "scalactic", "scalacticMacro"
      // no Scala.js plz
      "commonTestJS", "examplesJS", "scalacticJS", "scalacticMacroJS", "scalacticTestJS"
      "scalatestAppJS", "scalatestJS", "scalatestTestJS"
      // [scalatest-tests] [info] *** 5 SUITES ABORTED ***
      // [scalatest-tests] [info] *** 29 TESTS FAILED ***
      "examples"
    ]
    // needs extra heap to even compile
    extra.options: ["-Xmx3072m"]
    extra.commands: ${vars.default-commands} [
      // (well this one of those things where if I'd known in advance how many of these
      // exclusions we were going to need... oh well.......)
      // these failures are reproducible (most of them? after a while I stopped checking them all)
      // outside dbuild on vanilla 2.13.0, so, not investigated. it's pretty hard to figure out
      // where 3.0.x's 2.13 support even is, perhaps the fixes are on some scalatest branch I failed to locate.
      // anyway, reassess when we move to ScalaTest 3.1
      // part 1: managed sources
      """set managedSources in Test in genRegularTests1 ~= (_.filterNot(_.getName == "ListShouldContainOnlyLogicalAndSpec.scala").filterNot(_.getName == "ListShouldContainOnlyLogicalOrSpec.scala"))"""
      """set managedSources in Test in genRegularTests2 ~= (_.filterNot(_.getName == "EveryShouldContainOnlyLogicalOrSpec.scala"))"""
      """set managedSources in Test in genMustMatchersTests1 ~= (_.filterNot(_.getName == "ListMustContainOnlyLogicalAndSpec.scala").filterNot(_.getName == "ListMustContainOnlyLogicalOrSpec.scala"))"""
      """set managedSources in Test in genMustMatchersTests2 ~= (_.filterNot(_.getName.startsWith("EveryMustContainOnly")))"""
      """set managedSources in Test in genMustMatchersTests3 ~= (_.filterNot(_.getName == "ListMustContainOnlySpec.scala"))"""
      """set managedSources in Test in genRegularTests3 ~= (_.filterNot(_.getName == "ListShouldContainOnlyLogicalOrSpec.scala"))"""
      """set managedSources in Test in genRegularTests4 ~= (_.filterNot(_.getName == "FrameworkSuite.scala").filterNot(_.getName == "InsideMixinSpec.scala"))"""
      """set managedSources in Test in genContainTests2 ~= (_.filterNot(_.getName.containsSlice("ShouldContainOnly")))"""
      // part 2: unmanaged sources
      """set excludeFilter in (Test, unmanagedSources) in scalacticTest := HiddenFileFilter || "ChainSpec.scala" || "ChainTest.scala" || "EverySpec.scala""""
      """set excludeFilter in (Test, unmanagedSources) in scalatestTest := HiddenFileFilter || "EveryShouldContainOnlySpec.scala" || "ListShouldContainOnlySpec.scala" || "ListShouldContainOnlyLogicalAndSpec.scala" || "EveryShouldContainOnlyLogicalAndSpec.scala" || "EveryShouldContainOnlyLogicalOrSpec.scala" || "FrameworkSuite.scala" || "ListShouldContainOnlyLogicalOrSpec.scala" || "InsideMixinSpec.scala" || "InsideSpec.scala" || "RetriesSpec.scala""""
    ]
  }

  // frozen (May 2019) at May 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "scodec-bits"
    uri:  ${vars.uris.scodec-bits-uri}
    extra.projects: ["coreJVM"]
    extra.commands: ${vars.base.extra.commands} [
      // because scodec-build brings in sbt-gpg which errors on `publish`
      "set every gpgWarnOnFailure := true"
    ]
  }

  // frozen (June 2019) at April 2019 commit just before sbt->mill move

  ${vars.base} {
    name: "sourcecode"
    uri:  ${vars.uris.sourcecode-uri}
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
  }

  ${vars.base} {
    name: "portable-scala-reflect"
    uri:  ${vars.uris.portable-scala-reflect-uri}
    extra.projects: ["portable-scala-reflectJVM"]  // no Scala.js plz
  }

  // frozen at v1.2.0 tag for now, perhaps excessively cautiously; we might
  // consider tracking a branch instead
  ${vars.base} {
    name: "cats-effect"
    uri:  ${vars.uris.cats-effect-uri}
    extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js plz
    extra.commands: ${vars.base.extra.commands} [
      // I think cats dropped its catalysts dependency but there is one source file
      // in cats-effect that still expects it to be there, though not explicitly declared.
      "set libraryDependencies in coreJVM += \"org.typelevel\" % \"catalysts-platform\" % \"0.10.0\" % Test"
    ]
    deps.inject: ${vars.base.deps.inject} ["org.typelevel#catalysts-platform"]
  }

  // frozen at last commit before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "fs2"
    uri:  ${vars.uris.fs2-uri}
    extra.projects: ["coreJVM", "io", "reactiveStreams"]  // no Scala.js, no benchmarks or docs
    extra.commands: ${vars.base.extra.commands} [
      // otherwise sbt-gpg errors on `publish`
      "set every gpgWarnOnFailure := true"
    ]
  }

  ${vars.base} {
    name: "eff"
    uri:  ${vars.uris.eff-uri}
    extra.exclude: [
      "scalaz"
      // this is an aggregation project that we exclude because it adds a
      // ScalaMeter dependency
      "eff"
      // we have doobie now, but for some reason the dependency wasn't found
      // (January 2019), I didn't investigate
      "doobie"
      // we don't have catbird
      "twitter"
      // at present this doesn't compile, probably a version mismatch that will sort
      // itself out in the fullness of time, but for now:
      "monixJVM"
      // no Scala.js please
      "coreJS", "monixJS", "catsEffectJS"
    ]
  }

  ${vars.base} {
    name: "mouse"
    uri:  ${vars.uris.mouse-uri}
    extra.projects: ["crossJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "minitest"
    uri:  ${vars.uris.minitest-uri}
    extra.projects: ["minitestJVM", "lawsJVM", "lawsLegacyJVM"]  // no Scala.js
  }

  // forked awaiting merge of https://github.com/monix/monix/pull/875
  ${vars.base} {
    name: "monix"
    uri:  ${vars.uris.monix-uri}
    extra.options: ["-Dmonix.requireJava8=false"]
    // no Scala.js, no benchmarks.
    extra.projects: ["coreJVM"]
    extra.commands: ${vars.default-commands} [
      // 2.13: some tests hang; not investigated or reported upstream; we should re-check when we unfork
      """set excludeFilter in (Test, unmanagedSources) in evalJVM := HiddenFileFilter || "TaskAsyncAutoShiftJVMSuite.scala""""
      """set excludeFilter in (Test, unmanagedSources) in reactiveJVM := HiddenFileFilter || "OverflowStrategyUnboundedConcurrencySuite.scala""""
    ]
  }

  ${vars.base} {
    name: "unfiltered"
    uri:  ${vars.uris.unfiltered-uri}
  }

  // frozen (April 2019) because of some netty classpath problem (not investigated)
  ${vars.base} {
    name: "dispatch"
    uri:  ${vars.uris.dispatch-uri}
  }

  ${vars.base} {
    name: "log4s"
    uri:  ${vars.uris.log4s-uri}
    extra.exclude: ["coreJS", "testingJS"]
    // failed tests on 1.3; not investigated
    extra.sbt-version: ${vars.sbt-1-2-version}
  }

  // frozen (May 2019) at May 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "algebra"
    uri:  ${vars.uris.algebra-uri}
    extra.projects: ["coreJVM", "lawsJVM"]  // no Scala.js, no benchmarks, no docs
  }

  // frozen (July 2019) at June 2019 commit just before ScalaTest 3.1 upgrade (which also landed 2.13 support)
  ${vars.base} {
    name: "paiges"
    uri:  ${vars.uris.paiges-uri}
    extra.projects: ["coreJVM", "catsJVM"]  // but not "benchmark"
    // 2.13: tests don't compile until the catalysts dependency is dropped;
    // probably just wait for the maintainers to do their 2.13.0-RC2/Cats 2 upgrade
    extra.run-tests: false
  }

  // 3.6 is the current stable branch (as of March 2019);
  // there is also a development branch.  we are forked from the 3.6 branch
  // to relocate some scalaz-based tests
  ${vars.base} {
    name: "json4s"
    uri:  ${vars.uris.json4s-uri}
    extra.exclude: ["json4s-scalaz"]
    extra.commands: ${vars.default-commands} [
      "set every mimaPreviousArtifacts := Set()"
    ]
  }

  ${vars.base} {
    name: "singleton-ops"
    uri:  ${vars.uris.singleton-ops-uri}
    extra.projects: ["singleton_opsJVM"]
    extra.commands: ${vars.default-commands} [
      "set every bintrayReleaseOnPublish := false"
    ]
    extra.options: [
      "-Dbintray.user=dummy", "-Dbintray.pass=dummy"
    ]
  }

  // frozen (June 2019) at a June 2019 config just before a sbt-coursier
  // version bump that seems to be confusing dbuild during dependency extraction:
  // [scalacheck-shapeless] [error] java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
  // [scalacheck-shapeless] [error] 	at coursier.sbtcoursier.ResolutionTasks$.$anonfun$resolutionsTask$3(ResolutionTasks.scala:42)
  ${vars.base} {
    name: "scalacheck-shapeless"
    uri:  ${vars.uris.scalacheck-shapeless-uri}
    extra.projects: ["coreJVM", "testJVM"]  // no Scala.js plz
    // weird missing self-dependency in testJVM project: "the library
    // com.github.alexarchambault#scalacheck-shapeless is not provided
    // (in space "default") by any project in this configuration file."
    check-missing: false
    // (January 2018) "recursiveADT2" test fails
    extra.test-tasks: ["compile"]
    // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
    extra.options: ["-Xmx2048m"]
  }

  ${vars.base} {
    name: "curryhoward"
    uri:  ${vars.uris.curryhoward-uri}
    extra.sbt-version: ${vars.sbt-0-13-version}
    // I guess dbuild is getting confused by the extra _1.13?
    deps.ignore: ["com.github.alexarchambault#scalacheck-shapeless"]
    deps.inject: ${vars.base.deps.inject} [
      "com.github.alexarchambault#scalacheck-shapeless_1.13"
    ]
    check-missing: false
    extra.settings: ${vars.base.extra.settings} [
      "conflictWarning in ThisBuild := ConflictWarning.disable"
    ]
  }

  // frozen (May 2019) just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "spire"
    uri:  ${vars.uris.spire-uri}
    // hopefully avoid intermittent OutOfMemoryErrors during compilation
    extra.options: ["-Xmx2560m"]
    // this is all of spireJVM but omitting "benchmark". just excluding "benchmark" didn't work, idk why
    extra.projects: ["legacyJVM", "dataJVM", "macrosJVM", "utilJVM", "platformJVM", "coreJVM", "extrasJVM", "lawsJVM", "examples", "testsJVM", "spireJVM"]
    extra.exclude: ["benchmark"]
    extra.commands: ${vars.base.extra.commands} [
      "removeDependency org.openjdk.jmh jmh-core"
      "removeDependency org.openjdk.jmh jmh-generator-bytecode"
      "removeDependency org.openjdk.jmh jmh-generator-reflection"
    ]
  }

  // depends on spire
  ${vars.base} {
    name: "libra"
    uri: ${vars.uris.libra-uri}
    extra.exclude: ["docs"]
  }

  // dependency of scaladex (via akka-http-json)
  ${vars.base} {
    name: "jsoniter-scala"
    uri:  ${vars.uris.jsoniter-scala-uri}
    extra.exclude: ["jsoniter-scala-benchmark"]
  }

  // frozen (July 2019) at a commit just before some ScalaTest 3.1 specific code was added
  ${vars.base} {
    name: "better-monadic-for"
    uri:  ${vars.uris.better-monadic-for-uri}
    extra.exclude: [
      "scalazTests"
      // 2.13: pcplod is unmaintained, there is no 2.13 version
      "pcplodTests"
    ]
  }

]}

//// space: jawn_0_11

build += {

  space: scala.main.jawn_0_11

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "enumeratum"
    uri:  ${vars.uris.enumeratum-uri}
    extra.projects: [
      // for some reason dbuild doesn't seem to pick up on which subprojects
      // depend on each other, so we have to list them individually (even
      // though e.g. coreJVMTests depends on both coreJVM and macrosJVM)
      "coreJVM", "macrosJVM", "coreJVMTests"
      // as for other subprojects, for now let's just pull in what lsp4s
      // needs. maybe add more later
      "enumeratumCirceJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // not sure why we get these errors unless we turn them off
      "set every conflictWarning := ConflictWarning.disable"
    ]
  }

  ${vars.base} {
    name: "jawn-0-11"
    uri:  ${vars.uris.jawn-0-11-uri}
    // omitted: benchmark
    extra.projects: ["ast", "parser", "json4s", "spray", "play"]
  }

  // frozen (April 2019) at an April 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "circe"
    uri:  ${vars.uris.circe-uri}
    // failed compilation on sbt 1.3.0-RC3; not investigated
    // Symbol 'type io.circe.java8.time.JavaTimeDecoders' is missing from the classpath
    extra.sbt-version: ${vars.sbt-1-2-version}
    extra.projects: [
      // easy
      "coreJVM", "numbersJVM"
      // harder
      "jawn"
      // bunch more stuff that all depends on jawn
      "parserJVM", "genericJVM", "literalJVM", "scodecJVM", "testingJVM", "testsJVM"
      // dependency of scrooge-shapes
      "genericExtrasJVM"
    ]
    extra.commands: ${vars.default-commands} [
      // didn't compile (July 2019) after we unfroze ScalaCheck (StackOverflowError)
      """set excludeFilter in (Test, unmanagedSources) in generic := HiddenFileFilter || "AutoDerivedSuite.scala" || "JsonCodecMacrosSuite.scala" || "SemiautoDerivedSuite.scala""""
    ]
  }

  // frozen (June 2019) at April 2019 commit before fs2 version upgraded to
  // 1.1.x series; currently we have fs2 frozen on 1.0.x because of a ScalaTest 3.1
  // upgrade; presumably before too long we can move them all forward together
  ${vars.base} {
    name: "jawn-fs2"
    uri:  ${vars.uris.jawn-fs2-uri}
  }

  // frozen (June 2019) at May 2019 commit before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "circe-config"
    uri:  ${vars.uris.circe-config-uri}
  }

  // in this space because it depends on pureconfig
  ${vars.base} {
    name: "refined"
    uri:  ${vars.uris.refined-uri}
    // I don't see a project that aggregates just the JVM subprojects, so we name them one by one.
    // scodecJVM isn't included because the dependency wasn't found, maybe a version mismatch?
    // it's okay, we don't need to have absolutely every subproject
    // pureconfigJVM, same, though the problem didn't start until November 2018.  maybe
    // unfreezing pureconfig (or updating our fork) would fix it, but I'd rather not mess
    // it with right now.
    extra.projects: ["catsJVM", "coreJVM", "evalJVM", "jsonpathJVM", "scalacheckJVM", "shapelessJVM"]
    extra.exclude: ["scalacheck_1_13JVM"]
    extra.commands: ${vars.default-commands} [
      // as per https://github.com/fthomas/refined/issues/661 , this test can be re-enabled
      // once the repo is upgraded to 2.13.1
      """set coreJVM / Test / unmanagedSources / excludeFilter := HiddenFileFilter || "AdjacentSpec.scala""""
    ]
  }

  // core doesn't depend on refined, but refinedJVM does.
  // frozen (July 2019) just before ScalaTest 3.1 upgrade (2.13 support also)
  ${vars.base} {
    name: "decline"
    uri:  ${vars.uris.decline-uri}
    extra.projects: ["declineJVM", "refinedJVM"]  // no Scala.js, no doc
  }

  // dependency of lsp4s and scala-pet-store
  // frozen (April 2019) at an April 2019 commit just before ScalaTest 3.1 upgrade
  ${vars.base} {
    name: "circe-derivation"
    uri:  ${vars.uris.circe-derivation-uri}
    // there are some others, but really just trying to get lsp4s going at the moment
    extra.projects: ["derivation", "annotations"]
    extra.commands: ${vars.default-commands} [
      // didn't compile (July 2019) after we unfroze ScalaCheck (StackOverflowError)
      """set annotationsJVM / unmanagedSources / excludeFilter := HiddenFileFilter || "JsonCodecMacrosSuite.scala""""
    ]
  }

]}
